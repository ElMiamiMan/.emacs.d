#+title: emacs.org
Welcome to my Emacs config file!

* Table of Contents 
:TOC:
- [[#global-variables][Global Variables]]
- [[#appearance][Appearance]]
  - [[#all-the-icons][All The Icons]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#doom-themes][Doom Themes]]
  - [[#kaolin-themes][Kaolin Themes]]
- [[#utilities][Utilities]]
  - [[#aggressive-indent][Aggressive Indent]]
  - [[#calendar-calfw][Calendar (calfw)]]
  - [[#company][Company]]
  - [[#dashboard][Dashboard]]
  - [[#flycheck][Flycheck]]
  - [[#helm][Helm]]
  - [[#lsp][LSP]]
  - [[#neotree][Neotree]]
  - [[#nlinum][Nlinum]]
  - [[#org-mode][Org Mode]]
  - [[#org-calendar][Org Calendar]]
  - [[#page-break-lines][Page Break Lines]]
  - [[#projectile][Projectile]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#ranger][Ranger]]
  - [[#which-key][Whick Key]]
  - [[#yasnippet][Yasnippet]]
- [[#programming][Programming]]
  - [[#c-and-its-variants][C and its Variants]]
  - [[#ciao-prolog][Ciao Prolog]]
  - [[#platformio][PlatformIO]]
  - [[#rust][Rust]]

* Global Variables
  #+BEGIN_SRC emacs-lisp
    ;;(global-display-line-numbers-mode)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-auto-revert-mode)
    (fringe-mode '(nil . 0))
    (show-paren-mode t)
    (size-indication-mode t)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (column-number-mode t)
    (electric-layout-mode t)
    (electric-pair-mode t)
    (add-to-list 'default-frame-alist '(font . "FuraCode Nerd Font Mono 9"))
    (set-face-attribute 'default nil :family "FuraCode Nerd Font Mono 9")
    (set-frame-font "FuraCode Nerd Font Mono 9")
#+END_SRC

* Appearance
** All The Icons

   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC

** Doom Modeline
   
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :defer t
       :hook (after-init . doom-modeline-mode)
       :config
       (setq doom-modeline-height 10
	     doom-modeline-buffer-file-name-style 'truncate-from-project
	     doom-modeline-icon t
	     doom-modeline-major-mode-icon t
	     doom-modeline-minor-modes nil
	     doom-modeline-lsp nil
	     doom-modeline-github t
	     doom-modeline-github-interval (* 30 60)))
   #+END_SRC
   
   esto es un apa√±o del doom-modeline con emacsclient

   #+BEGIN_SRC emacs-lisp
     (if (daemonp)
	 (add-hook 'after-make-frame-functions
		     (setq doom-modeline-icon t)))
#+END_SRC

** Doom Themes

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (doom-themes-visual-bell-config)
       (doom-themes-neotree-config)  ; all-the-icons fonts must be installed!
       (doom-themes-org-config)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	     doom-themes-enable-italic t) ; if nil, italics is universally disabled
     )
#+END_SRC

** Kaolin Themes
   #+BEGIN_SRC emacs-lisp
     (use-package kaolin-themes
       :ensure t
       :init (load-theme 'kaolin-dark t))
#+END_SRC

* Utilities
** Aggressive Indent
   
   #+BEGIN_SRC emacs-lisp
     ;; (use-package aggressive-indent
     ;;   :ensure t)
     ;; :hook
     ;; ((rust-mode . aggressive-indent-mode)
     ;;  (cc-mode . aggressive-indent-mode)
     ;;  (arduino-mode . aggressive-indent-mode)
     ;;  (emacs-lisp-mode . aggressive-indent-mode)
     ;;  (sh-mode . aggressive-indent-mode)
     ;;  (python-mode . aggressive-indent-mode))
     ;; :custom
     ;; (aggressive-indent-comments-too t)
     ;; :config
     ;; (global-aggressive-indent-mode t))
   #+END_SRC

** Calendar (calfw)

   #+BEGIN_SRC emacs-lisp
     (use-package calfw
       :ensure t
       :config
       (require 'calfw)
       (require 'calfw-org)
       (setq cfw:org-overwrite-default-keybinding t
	     calendar-week-start-day 1)
       :bind ("C-c c" . cfw:open-org-calendar))
#+END_SRC

** Company
   
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :diminish
       :ensure t
       :init (global-company-mode)
       :config
       (setq company-auto-complete t
	     company-auto-complete-chars '(40 34 60)
	     company-idle-delay 0
	     company-minimum-prefix-length 3)
       (company-quickhelp-mode))
     (use-package company-lsp
       :ensure t
       :commands company-lsp)
     (push 'company-lsp company-backends)
#+END_SRC

** Dashboard

   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       ;;:diminish (dashboard-mode)
       ;;(add-hook 'after-init-hook 'dashboard-refresh-buffer)
       :init
       (add-hook 'dashboard-mode-hook (lambda () (page-break-lines-mode 1)))
       (add-hook 'dashboard-mode-hook (lambda () (nlinum-mode -1)))
       (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
	      dashboard-items '((recents . 3)
				(bookmarks . 3)
				(projects . 3)
				(agenda))
	      dashboard-center-content t
	      dashboard-set-init-info t
	      dashboard-set-footer t
	      dashboard-show-shortcuts t
	      dashboard-page-separator "\n\f\n"
	      show-week-agenda-p t)
       (dashboard-setup-startup-hook)
       :config)
       ;;(add-to-list 'dashboard-items '(agenda) t))
#+END_SRC

** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode t))
     (use-package flycheck-rust
       :ensure t
       :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC

** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :init (helm-mode 1)
       :bind (("<menu>" . helm-M-x)
	      ("M-x" . helm-M-x)
	      ("C-x r b" . helm-filtered-bookmarks)
	      ("C-x C-f" . helm-find-files)
	      ("C-x b" . helm-mini)
	      ("C-x C-b". helm-buffers-list))
       :config
       (helm-autoresize-mode 1))
#+END_SRC

** LSP

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :init (setq lsp-keymap-prefix "C-c l")
       :hook ((lsp-mode . lsp-enable-which-key-integration)
	      (sh-mode . lsp)
	      (python-mode . lsp)
	      (cc-mode . lsp)
	      (arduino-mode . lsp)
	      (rust-mode . lsp))
       :commands lsp)
#+END_SRC

   ui

   #+BEGIN_SRC emacs-lisp
     (use-package lsp-ui
       :ensure t
       :bind (("C-c l i" . lsp-ui-imenu)
	      ("C-c l f" . lsp-ui-doc-focus-frame)
	      ("C-c l u" . lsp-ui-doc-unfocus-frame))
       :init
       (lsp-ui-mode)
       (lsp-ui-doc-mode)
       (setq lsp-ui-doc-delay 1)
       :commands lsp-ui-mode)
#+END_SRC

** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t
       :bind (("<f8>" . neotree-toggle))
       :config
       (setq-default neo-show-hidden-files t)
       (setq neo-smart-open t
	     projectile-switch-project-action 'neotree-projectile-action)

       ;; Disable line-numbers minor mode for neotree
       (add-hook 'neo-after-create-hook
		 ;;(lambda (&rest _) (display-line-numbers-mode -1))))
		 (lambda (&rest _) (nlinum-mode -1))))
#+END_SRC

** Nlinum
   #+BEGIN_SRC emacs-lisp
     (use-package nlinum
       :ensure t
       :config
       (global-nlinum-mode))
#+END_SRC

** Org Mode
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :ensure t
       :config
       (require 'org-beautify-theme)
       (setq org-support-shift-select t
	     org-src-tab-acts-natively t))
#+END_SRC

** Org Calendar
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/orggcal.el")
#+END_SRC

** Page Break Lines
   #+BEGIN_SRC emacs-lisp
     (use-package page-break-lines
       :ensure t
       :config
       (setq page-break-lines-char 45
	     page-break-lines-max-width 0))
#+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
     :ensure t
     :bind (("M-p" . projectile-command-map))
     :init  (projectile-mode)
     (setq projectile-enable-caching t
	   projectile-indexing-method 'alien
	   projectile-sort-order 'recently-active
	   projectile-completion-system 'ivy))
#+END_SRC

** Rainbow Delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :init
       (add-hook 'prog-mode-hook 'rainbow-delimiters-mode 1))
#+END_SRC

** Ranger

   i think its cool but i don't use it at all on emacs lol

   #+BEGIN_SRC emacs-lisp
     (use-package ranger
     :ensure t
     :bind (("<f9>" . ranger)))
#+END_SRC

** Which Key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
     :ensure t
     :config (which-key-mode))
#+END_SRC

** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure ;TODO: 
       :init (yas-global-mode t)
       (put 'downcase-region 'disabled nil)
       (put 'upcase-region 'disabled nil))
     (use-package yasnippet-snippets
       :ensure t)
#+END_SRC

* Programming
** C and its Variants

   #+BEGIN_SRC emacs-lisp
     (use-package cc-mode
       :ensure t
       :config
       (add-hook 'c-mode-hook (lambda () (c-set-style "user"))))
#+END_SRC

** Ciao Prolog
   
   i have to use this because of uni pls dont bully

   #+BEGIN_SRC emacs-lisp
     (if (file-exists-p "~/.ciaoroot/master/ciao_emacs/elisp/ciao-site-file.el")
	     (load-file "~/.ciaoroot/master/ciao_emacs/elisp/ciao-site-file.el"))
#+END_SRC

** PlatformIO
   
   Useful for Arduino stuff!

   It /doesn't/ work out of the box since for some reason it won't detect the root directory of a PlatformIO project, so you might want to add an empty =.projectile= file
   manually in the root directory in order to work properly (AND also to have proper integration with Projectile :) )

   #+BEGIN_SRC emacs-lisp
     (use-package platformio-mode
       :ensure t
       :commands (platformio-conditionally-enable))
#+END_SRC

** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode
       :ensure t)
     (use-package cargo
       :ensure t
       :hook (rust-mode . cargo-minor-mode))
   #+END_SRC

-----

* [[#emacsorg][Back to top]]
